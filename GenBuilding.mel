// generate a single window
proc string GenWindow (float $w, float $h, float $d, int $extendDepth) {
	string $s[];
	string $window;
	float $w1, $w2, $d1, $d2;

	if ($extendDepth) { // extend depth to face out the wall
		$w1 = $w2 = $w;
		$d1 = $d + 0.1;
		$d2 = $d + 0.2;
	} else { // extend width to face out the wall
		$d1 = $d2 = $d;
		$w1 = $w + 0.1;
		$w2 = $w + 0.2;
	}
	// generate window
	$s = `polyCube -w $w1 -h $h -d ($d1)`;
	$window = $s[0];
	sets -e -forceElement blinn1SG;
	
	// generate window bottom
	$s = `polyCube -w $w2 -h (0.1) -d ($d2)`;
	move -y (-$h / 2.0);
	sets -e -forceElement lambert3SG;

	// merge them as one, return it
	$s = `polyUnite -ch 1 -mergeUVSets 1 $window $s[0]`;
	return $s[0];
}


// generate a single floor, windows + floor base
proc string GenFloor (int $w, int $h, int $d) {
	string $s[];
	string $objects[];
	int $objectsIndex = 0;
	string $windows[];
	float $windowSize = 0.6;

	// get base windows to copy
	$windows[0] = GenWindow($windowSize, $windowSize, $d, true);
	$windows[1] = GenWindow($w, $windowSize, $windowSize, false);

	// create floor
	$s = `polyCube -w ($w+0.15) -h 0.15 -d ($d+0.15)`;
	$objects[$objectsIndex] = $s[0];
	$objectsIndex++;
	sets -e -forceElement lambert3SG;

	// create windows	
	for ($x = -$w/2.0 + 0.5; $x <= $w/2.0 - 0.5; $x+=1) {
		// window top
		select -r $windows[0];
		$s = `duplicate -rr`;
		$objects[$objectsIndex] = $s[0];
		$objectsIndex++;
		move -x ($x) -y 0.5;
	}
	for ($z = -$d/2.0 + 0.5; $z <= $d/2.0 - 0.5; $z+=1) {
		select -r $windows[1];
		$s = `duplicate -rr`;
		$objects[$objectsIndex] = $s[0];
		$objectsIndex++;
		move -y 0.5 -z ($z);
	}

	// delete base windows
	select -r $windows;
	doDelete;

	// merge everything we just created
	$s = `polyUnite -ch 1 -mergeUVSets 1 $objects`;
	return $s[0];

}

// create a single building based on input dimension
proc string GenBuilding (int $w, int $h, int $d) {
	int $y;
	string $s[];
	string $objects[];
	int $objectsIndex = 0;

	// create ceiling
	$s = `polyCube -w ($w+0.15) -h 0.15 -d ($d+0.15)`;
	$objects[$objectsIndex] = $s[0];
	$objectsIndex++;
	move -y ($h);
	sets -e -forceElement lambert3SG;

	// create the first floor
	$objects[$objectsIndex] = GenFloor($w, $h, $d);
	$objectsIndex++;

	// create the rest of the floor based on first floor
	for ($y = 1; $y < $h; $y+=1)
	{
		// create duplicate, move it up
		select -r $objects[1];
		$s = `duplicate -rr`;
		$objects[$objectsIndex] = $s[0];
		$objectsIndex++;
		move -y ($y);
	}

	// create building body
	$s = `polyCube -w $w -h $h -d $d`;
	$objects[$objectsIndex] = $s[0];
	move -y ($h/2.0);
	sets -e -forceElement lambert2SG;

	// merge everything we just created
	$s = `polyUnite -ch 1 -mergeUVSets 1 $objects`;
	return $s[0];
}