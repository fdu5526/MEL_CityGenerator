proc string GenBuilding (int $w, int $h, int $d) {
	float $x, $y, $z;
	string $s[];
	string $objects[];

	// for each floor
	for ($y = 0.5; $y < $h; $y+=1)
	{
		// create the floor bottom
		$s = `polyCube -w ($w+0.15) -h 0.15 -d ($d+0.15)`;
		$objects[`size $objects`] = $s[0];
		move 0 ($y-0.5) 0;
		sets -e -forceElement lambert3SG;

		// create windows
		float $windowSize = 0.6;
		for ($x = -$w/2.0 + 0.5; $x <= $w/2.0 - 0.5; $x+=1) {
			// window top
			$s = `polyCube -w $windowSize -h $windowSize -d ($d + 0.1)`;
			$objects[`size $objects`] = $s[0];
			move ($x) ($y) 0;
			sets -e -forceElement lambert4SG;
			// window bottom
			$s = `polyCube -w $windowSize -h (0.1) -d ($d + 0.2)`;
			$objects[`size $objects`] = $s[0];
			move ($x) ($y - $windowSize / 2.0) 0;
			sets -e -forceElement lambert3SG;
		}
		for ($z = -$d/2.0 + 0.5; $z <= $d/2.0 - 0.5; $z+=1) {
			// window top
			$s = `polyCube -w ($w + 0.1) -h $windowSize -d $windowSize`;
			$objects[`size $objects`] = $s[0];
			move 0 ($y) ($z);
			sets -e -forceElement lambert4SG;
			// window bottom
			$s = `polyCube -w ($w + 0.2) -h (0.1) -d $windowSize`;
			$objects[`size $objects`] = $s[0];
			move 0 ($y - $windowSize / 2.0) ($z);
			sets -e -forceElement lambert3SG;
		}
	}
	// create ceiling
	$s = `polyCube -w ($w+0.15) -h 0.15 -d ($d+0.15)`;
	$objects[`size $objects`] = $s[0];
	move 0 ($h) 0;
	sets -e -forceElement lambert3SG;

	// create building body
	$s = `polyCube -w $w -h $h -d $d`;
	$objects[`size $objects`] = $s[0];
	move 0 ($h/2.0) 0;
	sets -e -forceElement lambert2SG;

	// merge everything we just created
	$s = `polyUnite -ch 1 -mergeUVSets 1 $objects`;
	return $s[0];
}